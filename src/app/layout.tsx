import { Metadata } from 'next';

export const metadata: Metadata = {
  title: {
    default: 'Next.js Tutorial - Codevolution',
    template: '%s | Codevolution',
  },
  description: 'Generated by Next.js',
};

// Title metadata
// it's primary purpose - define the document title
// can be string or an object
// the title object can have a default property - used as a fallback title for child route segments which don't explicitly specify a title - aka if a child doesn't have explicitly defined title, this one will be used
// or it can have a template property - to create a dinamic titles by adding a prefix or a suffix - it applies only to a child route segments and not the segmen in which it is defined - we specify it as "%s | Codevolution" - the %s gets replaced by the title metadata specified in the child component
// or it can have an absolute property - if we want to have a title that completely ignores title.template set in the parent segments

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        {' '}
        <header style={{ backgroundColor: 'lavender', padding: '1rem' }}>
          <p>Header</p>
        </header>
        {children}
        <footer style={{ backgroundColor: 'pink', padding: '1rem' }}>
          <p>Footer</p>
        </footer>
      </body>
    </html>
  );
}

// Layouts
// a page = UI that is unique to a route
// a layout = UI that is shared between multiple pages in the app - achieving a header - content - footer layout is now way easier
// how - default exporting a React component from layout.js or layout.tsx file
// every layout component should accept a children prop that will be populated with a child page during rendering
// Next provides a default layout out of the box - we don't have to create it from scratch if we don't need to
// similarly to page.tsx, layout.tsx have their own naming convention
// the root layout - located in the src/app - layout.tsx - a mandatory layout for every next.js application - gets automatically generated even if we delete it
// it basically substitutes the main html file for rendering React apps + we don't have to create separate layout component
